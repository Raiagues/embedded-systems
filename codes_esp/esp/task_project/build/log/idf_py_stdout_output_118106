[1/10] Performing build step for 'bootloader'
[1/1] cd /home/rodriger/Documents/embedded-systems/codes_esp/esp/task_project/build/bootloader/esp-idf/esptool_py && /home/rodriger/.espressif/python_env/idf5.4_py3.12_env/bin/python /home/rodriger/Documents/embedded-systems/codes_esp/esp/esp-idf/components/partition_table/check_sizes.py --offset 0x8000 bootloader 0x1000 /home/rodriger/Documents/embedded-systems/codes_esp/esp/task_project/build/bootloader/bootloader.bin
Bootloader binary size 0x6580 bytes. 0xa80 bytes (9%) free.
[2/10] No install step for 'bootloader'
[3/10] Completed 'bootloader'
[4/10] Building C object esp-idf/main/CMakeFiles/__idf_main.dir/task_project.c.obj
[5/10] Linking C static library esp-idf/main/libmain.a
[6/10] Generating ld/sections.ld
[7/10] Linking CXX executable task_project.elf
[8/10] Generating binary image from built executable
esptool.py v4.8.1
Creating esp32 image...
Merged 2 ELF sections
Successfully created esp32 image.
Generated /home/rodriger/Documents/embedded-systems/codes_esp/esp/task_project/build/task_project.bin
[9/10] cd /home/rodriger/Documents/embedded-systems/codes_esp/esp/task_project/build/esp-idf/esptool_py && /home/rodriger/.espressif/python_env/idf5.4_py3.12_env/bin/python /home/rodriger/Documents/embedded-systems/codes_esp/esp/esp-idf/components/partition_table/check_sizes.py --offset 0x8000 partition --type app /home/rodriger/Documents/embedded-systems/codes_esp/esp/task_project/build/partition_table/partition-table.bin /home/rodriger/Documents/embedded-systems/codes_esp/esp/task_project/build/task_project.bin
task_project.bin binary size 0x2baf0 bytes. Smallest app partition is 0x100000 bytes. 0xd4510 bytes (83%) free.
[9/10] cd /home/rodriger/Documents/embedded-systems/codes_esp/esp/esp-idf/components/esptool_py && /usr/bin/cmake -D IDF_PATH=/home/rodriger/Documents/embedded-systems/codes_esp/esp/esp-idf -D "SERIAL_TOOL=/home/rodriger/.espressif/python_env/idf5.4_py3.12_env/bin/python;;/home/rodriger/Documents/embedded-systems/codes_esp/esp/esp-idf/components/esptool_py/esptool/esptool.py;--chip;esp32" -D "SERIAL_TOOL_ARGS=--before=default_reset;--after=hard_reset;write_flash;@flash_args" -D WORKING_DIRECTORY=/home/rodriger/Documents/embedded-systems/codes_esp/esp/task_project/build -P /home/rodriger/Documents/embedded-systems/codes_esp/esp/esp-idf/components/esptool_py/run_serial_tool.cmake
esptool.py --chip esp32 -p /dev/ttyUSB0 -b 460800 --before=default_reset --after=hard_reset write_flash --flash_mode dio --flash_freq 40m --flash_size 2MB 0x1000 bootloader/bootloader.bin 0x10000 task_project.bin 0x8000 partition_table/partition-table.bin
esptool.py v4.8.1
Serial port /dev/ttyUSB0
Connecting....
Chip is ESP32-D0WD-V3 (revision v3.0)
Features: WiFi, BT, Dual Core, 240MHz, VRef calibration in efuse, Coding Scheme None
Crystal is 40MHz
MAC: b4:8a:0a:86:b5:a4
Uploading stub...
Running stub...
Stub running...
Changing baud rate to 460800
Changed.
Configuring flash size...
Flash will be erased from 0x00001000 to 0x00007fff...
Flash will be erased from 0x00010000 to 0x0003bfff...
Flash will be erased from 0x00008000 to 0x00008fff...
SHA digest in image updated
Compressed 25984 bytes to 16379...
Writing at 0x00001000... (100 %)
Wrote 25984 bytes (16379 compressed) at 0x00001000 in 0.9 seconds (effective 225.5 kbit/s)...
Hash of data verified.
Compressed 178928 bytes to 97427...
Writing at 0x00010000... (16 %)
Writing at 0x0001c3a4... (33 %)
Writing at 0x00021e28... (50 %)
Writing at 0x000279f0... (66 %)
Writing at 0x0002eeef... (83 %)
Writing at 0x00035a68... (100 %)
Wrote 178928 bytes (97427 compressed) at 0x00010000 in 2.9 seconds (effective 494.8 kbit/s)...
Hash of data verified.
Compressed 3072 bytes to 103...
Writing at 0x00008000... (100 %)
Wrote 3072 bytes (103 compressed) at 0x00008000 in 0.1 seconds (effective 307.4 kbit/s)...
Hash of data verified.

Leaving...
Hard resetting via RTS pin...
